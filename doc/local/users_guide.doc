/*! 
\page users_guide Users Guide

\section ug_toc Table of Contents
- \ref ug_introduction
- \ref ug_get_started
  - \ref ug_get_source
  - \ref ug_build_binaries
  - \ref ug_build_and_run_tests
  - \ref ug_install_project
- \ref ug_inputfile
- \ref ug_bom_bom
 - \ref ug_bom_build 
 - \ref ug_bom_display 
- \ref ug_bom_structure
 - \ref ug_bom_network
 - \ref ug_bom_schedule
- \ref ug_extending_bom_tree
- \ref ug_procedure

\section ug_introduction Introduction

The \c TvlSim library contains classes for airline business management.
This document does not cover all the aspects of the \c TvlSim library. It 
does however explain the most important things you need to know in order
to start using \c TvlSim. 

\section ug_get_started Get Started

\subsection ug_get_source Get the TvlSim library

Clone locally the full
<a href="http://tvlsim.git.sourceforge.net/git/gitweb.cgi?p=tvlsim/tvlsim;a=tree;h=refs/heads/trunk;hb=trunk">Git project</a>:
\verbatim 
cd ~
mkdir -p dev/sim
cd ~/dev/sim
git clone git://tvlsim.git.sourceforge.net/gitroot/tvlsim/tvlsim tvlsimgit
cd tvlsimgit
git checkout trunk
\endverbatim 

\subsection ug_build_binaries Build the TvlSim project

Link with StdAir, create the distribution package (say, 0.5.0) and compile 
using the following commands:
\verbatim 
cd ~/dev/sim/tvlsimgit
rm -rf build && mkdir -p build
cd build
cmake -DCMAKE_INSTALL_PREFIX=~/dev/deliveries/tvlsim-0.5.0 \
 -DWITH_STDAIR_PREFIX=~/dev/deliveries/stdair-stable \
 -DCMAKE_BUILD_TYPE:STRING=Debug -DINSTALL_DOC:BOOL=ON ..
make
\endverbatim 

\subsection ug_build_and_run_tests Build and Run the Tests

After building the TvlSim project, the following commands run the tests:
\verbatim 
cd ~/dev/sim/tvlsimgit
cd build
make check
\endverbatim 

As a result, you should obtain a similar report:

\verbatim 
[  0%] Built target hdr_cfg_tvlsim
[ 96%] Built target tvlsimlib
[100%] Built target AirlineScheduleTestSuitetst
Scanning dependencies of target check_tvlsimtst
Test project /home/dan/dev/sim/tvlsim/tvlsimgithub/build/test/tvlsim
    Start 1: AirlineScheduleTestSuitetst
1/1 Test #1: AirlineScheduleTestSuitetst ......   Passed    0.15 sec

100% tests passed, 0 tests failed out of 1

Total Test time (real) =   0.40 sec
[100%] Built target check_tvlsimtst
Scanning dependencies of target check
[100%] Built target check
\endverbatim 

\subsection ug_install_project Install the TvlSim Project (Binaries, Documentation)

After the step \ref ug_build_binaries, to install the library and its header 
files, type:
\verbatim 
cd ~/dev/sim/tvlsimgit
cd build
make install
\endverbatim

You can check that the executables and other required files have been copied 
into the given final directory: 

\verbatim 
cd ~dev/deliveries/tvlsim-0.5.0
\endverbatim

To generate the TvlSim project documentation, the commands are:

\verbatim 
cd ~/dev/sim/tvlsimgit
cd build
make doc
\endverbatim
The TvlSim project documentation is available in the following formats: HTML, 
LaTeX. 
Those documents are available in a subdirectory:

\verbatim 
cd ~/dev/sim/tvlsimgit
cd build
cd doc
\endverbatim

\section ug_inputfile Input file of TvlSim Project 

The schedule input file structure should look like the following sample:

\dontinclude scheduleInputFile.ref 
\until 10;

Each line, beyond the header, represents a schedule entry, i.e., the
specification of a given flight-period (see \c TVLSIM::FlightPeriodStruct).
The fields are as follows:
- Flights section
 - AirlineCode (e.g., \c BA)
 - FlightNumber (e.g., \c 9)
 - Start of the flight departure period (e.g., \c 2007-04-20)
 - End of the flight departure period (e.g., \c 2007-06-30)
 - Day-Of-the-Week for the flight departure period (DOW) (e.g., \c 0000011)
 - Leg section
 - Segment section
- Leg section
 - BoardPoint (e.g., \c LHR)
 - OffPoint (e.g., \c BKK)
 - BoardTime (e.g., \c 22:00)
 - ArrivalTime (e.g., \c 15:15)
 - ArrivalDateOffSet (e.g., \c  +1)
 - ElapsedTime (e.g., \c 11:15)
 - Leg-cabin section
- Leg-cabin section
 - Cabin code (e.g., \c F, \c J, \c W or \c Y)
 - Capacity (e.g., respectively \c 5, \c 12, \c 20 or \c 300)
- Segment section
 - Specificity flag:
  - \c 0 means that all the segments behave the same way, i.e., have
    got the same dressing (distribution and order of the booking
    classes per cabin)
  - \c 1 means that each segment bahave differently. The full
    specification of each of those segments must therefore be given.
 - Segment-cabin section
 - Fare family section
- Segment-cabin section
 - Cabin code (e.g., \c F, \c J, \c W or \c Y)
 - List of (one-letter-code) booking classes for the cabin (e.g,
   respectively \c FA, \c JCDI, \c WT or \c YBHKMLSQ)
- Fare family section
 - Fare family code (e.g., \c 1)
 - List of (one-letter-code) booking classes for the fare family (e.g,
   respectively \c FA, \c JCDI, \c WT or \c YBHKMLSQ)

Some fare input examples (including the example above named <a
href="http://stdair.git.sourceforge.net/git/gitweb.cgi?p=stdair/stdair;a=blob_plain;f=samples/schedule03.csv;hb=trunk">schedule03.csv</a>)
are given in the <a
href="http://stdair.git.sourceforge.net/git/gitweb.cgi?p=stdair/stdair;a=tree;f=samples;hb=trunk">StdAir
project</a>.

\section ug_bom_bom The schedule BOM Tree

The schedule-related Business Object Model (BOM) tree is a structure
allowing to store all the \c TVLSIM::FlightPeriodStruct objects of
the simulation. That is why parsing an input file, containing the
specification for all the flight-periods, is more convenient (\see the
previous section \ref ug_inputfile).

As it may be time consuming, and it for sure requires some know-how,
to first build such a schedule input file, a small sample BOM tree is
provided by default when needed.

\subsection ug_bom_build Build of the schedule BOM tree 

First, a BOM root object (i.e., a root for all the classes in the project)
is instantiated by the <tt>stdair::STDAIR_ServiceContext</tt> context object,
when the <tt>stdair::STDAIR_Service</tt> is itself instantiated (during the
instantiation of the <tt>TVLSIM::TVLSIM_Service</tt> object).

The corresponding \c type (class) <tt>stdair::BomRoot</tt> is defined in the
StdAir library.

Then, the BOM root can be either constructed thanks to the 
<tt>TVLSIM::TVLSIM_Service::buildSampleBom()</tt> method:

\dontinclude TVLSIM_Service.hpp
\skipline buildSampleBom

or can be constructed using the schedule input file described above thanks to
the
<tt>TVLSIM::TVLSIM_Service::parseAndLoad (const stdair::Filename_T&)</tt>
method:

\dontinclude TVLSIM_Service.hpp
\skipline parseAndLoad 

\subsection ug_bom_display Display of the schedule BOM tree 

\note That feature (of BOM tree display) has not been implemented yet.
      Do not hesitate to <a
      href="https://sourceforge.net/apps/trac/tvlsim/newticket">open
      a ticket</a> if you would like to have it implemented more quickly.

The schedule BOM tree can be displayed as done in the 
<tt>batches::tvlsim.cpp</tt> program:
\dontinclude tvlsim.cpp
\skipline lBOMCSVDump
\line lBOMCSVDump

When the default BOM tree is used (<tt>-b/--builtin</tt> option of the main
program <tt>tvlsim.cpp</tt>), the schedule BOM tree display (for now,
corresponding to <a
href="http://stdair.git.sourceforge.net/git/gitweb.cgi?p=stdair/stdair;a=blob_plain;f=samples/schedule03.csv;hb=trunk">schedule01.csv</a>
parsed by
<a
href="http://tvlsim.git.sourceforge.net/git/gitweb.cgi?p=tvlsim/tvlsim;a=blob_plain;f=tvlsim/batches/parseInventory.cpp;hb=trunk">TVLSIM::parseInventory</a>)
should look like:

\include bomTreeDisplay.ref

\section ug_bom_structure Exploring the Predefined BOM Tree

\image html tvlsim_bom_tree.png "TvlSim BOM tree"
\image rtf tvlsim_bom_tree.png "TvlSim BOM tree"
\image latex tvlsim_bom_tree.png "TvlSim BOM tree" width=15cm

\c TvlSim predefines a BOM (Business Object Model) tree specific to the
airline IT arena.

\subsection ug_bom_network Airline Network BOM Tree
- \c TVLSIM::ReachableUniverse
- \c TVLSIM::OriginDestinationSet
- \c TVLSIM::SegmentPathPeriod

\subsection ug_bom_schedule Airline Schedule BOM Tree
- \c stdair::Inventory
- \c stdair::FlightPeriod
- \c stdair::SegmentPeriod
- \c stdair::OnDPeriod

\section ug_extending_bom_tree Extending the BOM Tree

\section ug_procedure The travel solution calculation procedure

The project TvlSim aims at calculating a list of <a
href="http://stdair.sourceforge.net/TravelSolutionStruct_8hpp.html">
travel solutions</a> for every incoming <a
href="http://stdair.sourceforge.net/BookingRequestStruct_8hpp.html">
booking request</a>.


*/
