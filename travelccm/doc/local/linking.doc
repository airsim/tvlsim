/*! 
\page linking Linking with TRAVELCCM

\section toc Table of Contents
- \ref intro
- \ref pkgconfig
- \ref travelccmconfig
- \ref dynamiclinking


\section intro Introduction

Since version 0.2.0, there are two convenient methods of linking your
programs with the TRAVELCCM library. The first one employs the \c
`pkg-config' command (see <a href="http://pkgconfig.freedesktop.org/">
http://pkgconfig.freedesktop.org/</a>), wheres the second one uses \c
`travelccm-config' script. These methods are shortly described below.


\section pkgconfig Using the pkg-config command

\c `pkg-config' is a helper tool used when compiling applications and
libraries. It helps you insert the correct compiler and linker
options. The syntax of the \c `pkg-config' is as follows:

\code
% pkg-config <options> <library_name>  
\endcode

For instance, assuming that you need to compile an TRAVELCCM based program
<tt>`my_prog.cpp'</tt>, you should use the following command:

\code
% g++ `pkg-config --cflags travelccm` -o my_prog my_prog.cpp `pkg-config --libs travelccm`
\endcode  

For more information see the \c `pkg-config' man pages.


\section travelccmconfig Using the travelccm-config script

TRAVELCCM provides a shell script called \c `travelccm-config`, which is
installed by default in <tt>`$prefix/bin'</tt>
(<tt>`/usr/local/bin'</tt>) directory. It can be used to simplify
compilation and linking of TRAVELCCM based programs. The usage of this
script is quite similar to the usage of the \c `pkg-config' command.

Assuming that you need to compile the program <tt>`my_prog.cpp'</tt>
you can now do that with the following command:

\code
% g++ `travelccm-config --cflags` -o my_prog my_prog.cpp `travelccm-config --libs`
\endcode

A list of \c `travelccm-config' options can be obtained by typing:

\code
% travelccm-config --help
\endcode

If the \c `travelccm-config' command is not found by your shell, you should add
its location <tt>`$prefix/bin'</tt> to the PATH environment variable, e.g.:

\code
% export PATH=/usr/local/bin:$PATH
\endcode


\section dynamiclinking Using TRAVELCCM with dynamic linking

When using static linking some of the library routines in TRAVELCCM are
copied into your executable program. This can lead to unnecessary
large executables. To avoid having too large executable files you may
use dynamic linking instead. Dynamic linking means that the actual
linking is performed when the program is executed. This requires that
the system is able to locate the shared TRAVELCCM library file during your
program execution. If you install the TRAVELCCM library using a non-standard
prefix, the \c `LD_LIBRARY_PATH' environment variable might be used to
inform the linker of the dynamic library location, e.g.:
\code
export LD_LIBRARY_PATH=<TRAVELCCM installation prefix>/lib:$LD_LIBRARY_PATH
\endcode

*/
