#ifndef __TRADEMGEN_CMD_DEMANDMANAGER_HPP
#define __TRADEMGEN_CMD_DEMANDMANAGER_HPP

// //////////////////////////////////////////////////////////////////////
// Import section
// //////////////////////////////////////////////////////////////////////
// StdAir
#include <stdair/stdair_basic_types.hpp>
#include <stdair/basic/RandomGeneration.hpp>
#include <stdair/bom/BookingRequestTypes.hpp>
#include <stdair/command/CmdAbstract.hpp>
// TraDemGen
#include <trademgen/TRADEMGEN_Types.hpp>
#include <trademgen/basic/DemandCharacteristicsTypes.hpp>
#include <trademgen/bom/DemandStreamKey.hpp>

// Forward declarations
namespace stdair {
  class EventQueue;
  struct ProgressStatusSet;
}

namespace TRADEMGEN {

  // Forward declarations
  struct DemandDistribution;
  struct DemandStruct;
  class DemandStream;
  namespace DemandParserHelper {
    struct doEndDemand;
  }

  /**
   * @brief Utility class for Demand and DemandStream objects.
   */
  class DemandManager : public stdair::CmdAbstract {
    friend struct DemandParserHelper::doEndDemand;
    friend class TRADEMGEN_Service;
    
  private:
    // //////// Business methodes //////////
    /**
     * Generate a sample BOM tree, made of a single DemandStream object.
     *
     * As of now (March 2011), it corresponds to:
     * <ul>
     *  <li>Origin: SIN</li>
     *  <li>Destination: BKK</li>
     *  <li>Preferred departure date: 2011-02-14</li>
     *  <li>Preferred cabin: Y (Economy)</li>
     *  <li>POS distribution:
     *    <ul>
     *      <li>BKK: 30%</li>
     *      <li>SIN: 70%</li>
     *    </ul>
     *  </li>
     *  <li>Channel distribution:
     *    <ul>
     *      <li>Direct Offline:   10%</li>
     *      <li>Direct Online:    30%</li>
     *      <li>Indirect Offline: 40%</li>
     *      <li>Indirect Online:  20%</li>
     *    </ul>
     *  </li>
     *  <li>Trip type distribution:
     *    <ul>
     *      <li>Outbound: 60%</li>
     *      <li>Inbound:  20%</li>
     *      <li>One-way:  20%</li>
     *    </ul>
     *  </li>
     *  <li>Arrival pattern distribution:
     *    <ul>
     *      <li>330 DTD:   0%</li>
     *      <li> 40 DTD:  20%</li>
     *      <li> 20 DTD:  60%</li>
     *      <li>  1 DTD: 100%</li>
     *    </ul>15:0, 60:1
     *  </li>
     *  <li>Stay duration distribution:
     *    <ul>
     *      <li>0 day:   10%</li>
     *      <li>1 day:   10%</li>
     *      <li>2 days:  15%</li>
     *      <li>3 days:  15%</li>
     *      <li>4 days:  15%</li>
     *      <li>5 days:  35%</li>
     *    </ul>
     *  </li>
     *  <li>Frequent flyer distribution:
     *    <ul>
     *      <li>Platinum:  1%</li>
     *      <li>Gold:      5%</li>
     *      <li>Silver:   15%</li>
     *      <li>Member:   30%</li>
     *      <li>No card:  49%</li>
     *    </ul>
     *  </li>
     *  <li>Preferred departure time (cumulative distribution):
     *    <ul>
     *      <li>6am:    0%</li>
     *      <li>7am:   10%</li>
     *      <li>9am:   30%</li>
     *      <li>5pm:   40%</li>
     *      <li>7pm:   80%</li>
     *      <li>8pm:   95%</li>
     *      <li>10pm: 100%</li>
     *    </ul>
     *  </li>
     *  <li>Value of time distribution:
     *    <ul>
     *      <li>15 min:   0%</li>
     *      <li>60 min: 100%</li>
     *    </ul>
     *  </li>
     *  <li>WTP: 200</li>
     *  <li>Number of requests: Normal (mu = 10.0, std_dev = 1.0)</li>
     *  <li>Change fee: 20; Non refundable; Saturday night stay</li>
     * </ul>
     */
    static void buildSampleBom (stdair::EventQueue&, stdair::RandomGeneration&,
                                const POSProbabilityMass_T&);

    /**
     * Generate the Demand objects corresponding to the given
     * Flight-Period, and add them to the given EventQueue.
     *
     * @param stdair::EventQueue& Reference on the EventQueue.
     * @param stdair::RandomGeneration& Boost uniform generator.
     */
    static void createDemandCharacteristics (stdair::EventQueue&,
                                             stdair::RandomGeneration&,
                                             const POSProbabilityMass_T&,
                                             const DemandStruct&);

    /**
     * Generate the random seed for the demand characteristic
     * distributions.
     *
     * @param stdair::RandomGeneration& Boost uniform generator.
     * @return stdair::RandomSeed_T The generated seed.
     */
    static stdair::RandomSeed_T generateSeed (stdair::RandomGeneration&);

    /**
     * Create a demand stream object and it into the BOM tree.
     *
     * <br>That method returns the expected number of events to be
     * generated by that demand stream. That number is expected, not
     * actual, because it corresponds to an average. The actual number
     * (of events to be generated) is then randomly drawn, according
     * to a normal distribution following the parameters (mean and
     * standard deviation) given as parameter within the
     * DemandDistribution structure.
     *
     * @param stdair::EventQueue& Reference on the EventQueue object,
     *   to which the newly created DemandStream instance will be
     *   attached.
     * @param const DemandStreamKey& A string identifying uniquely the
     *   demand stream (e.g., "SIN-HND 2010-Feb-08 Y").
     * @param const DemandDistribution& Parameters (mean, standard
     *   deviation) of the probability distribution for the demand
     *   generation.
     * @return DemandStream& The newly created DemandStream object.
     */
    static DemandStream&
    createDemandStream (stdair::EventQueue&,
                        const DemandStreamKey&,
                        const ArrivalPatternCumulativeDistribution_T&,
                        const POSProbabilityMassFunction_T&,
                        const ChannelProbabilityMassFunction_T&,
                        const TripTypeProbabilityMassFunction_T&,
                        const StayDurationProbabilityMassFunction_T&,
                        const FrequentFlyerProbabilityMassFunction_T&,
                        const PreferredDepartureTimeContinuousDistribution_T&,
                        const stdair::WTP_T&,
                        const ValueOfTimeContinuousDistribution_T&,
                        const DemandDistribution&,
                        const stdair::RandomSeed_T&,
                        const stdair::RandomSeed_T&,
                        const stdair::RandomSeed_T&,
                        const POSProbabilityMass_T&);

    /**
     * State whether there are still events to be generated for
     * the demand stream, for which the key is given as parameter.
     *
     * @param stdair::EventQueue& Reference on the top of the BOM tree.
     * @param const DemandStreamKey& A string identifying uniquely the
     *   demand stream (e.g., "SIN-HND 2010-Feb-08 Y").
     * @param stdair::ProgressStatusSet
     * @return bool Whether or not there are still some events to be
     *   generated.
     */
    static const bool
    stillHavingRequestsToBeGenerated (const stdair::EventQueue&,
                                      const stdair::DemandStreamKeyStr_T&,
                                      stdair::ProgressStatusSet&);

    /**
     * Generate the first event/booking request for every demand
     * stream.
     *
     * @param stdair::EventQueue& Reference on the top of the BOM tree.
     * @return stdair::Count_T The actual total number of events to
     *         be generated, for all the demand stream.
     */
    static stdair::Count_T generateFirstRequests (stdair::EventQueue&,
                                                  stdair::RandomGeneration&);

    /**
     * Generate a request with the demand stream, for which the key is
     * given as parameter.
     *
     * The state of the random generator, passed as parameter, is
     * altered, reflecting the random generations made within that
     * method.
     *
     * @param stdair::EventQueue& Reference on the top of the BOM tree.
     * @param stdair::RandomGeneration& Random generator.
     * @param const DemandStreamKey& A string identifying uniquely the
     *   demand stream (e.g., "SIN-HND 2010-Feb-08 Y").
     * @return stdair::BookingRequestPtr_T (Boost) shared pointer on
     *   the booking request structure, which has just been created.
     */
    static stdair::BookingRequestPtr_T
    generateNextRequest (stdair::EventQueue&, stdair::RandomGeneration&,
                         const stdair::DemandStreamKeyStr_T&);

    /**
     * Reset the context of the demand streams for another demand
     * generation without having to reparse the demand input file.
     *
     * @param stdair::EventQueue& Reference on the top of the BOM tree.
     */
    static void reset (stdair::EventQueue&);
  };

}
#endif // __TRADEMGEN_CMD_DEMANDMANAGER_HPP
